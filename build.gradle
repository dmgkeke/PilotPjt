import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.5.RELEASE")
        classpath("org.hsqldb:hsqldb:2.3.1")
        classpath("org.flywaydb:flyway-gradle-plugin:3.2.1")
    }
}

project.ext {
    springSecurityOauthVersion = "2.0.10.RELEASE"
    springVersion = "4.2.6.RELEASE"
    springSecurityVersion = "3.2.8.RELEASE"
    springSecurityLdapVersion = "4.1.0.RELEASE"
    springBootVersion = "1.3.5.RELEASE"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'org.flywaydb.flyway'
apply plugin: 'maven'

sourceCompatibility = 1.7
targetCompatibility = 1.7
version = '0.0.3-SNAPSHOT'

jar {
	baseName = 'am-auth-server'
    version = version

    manifest {
        attributes 'Implementation-Title': 'Anyframe Mobine amAuth Server',
                   'Implementation-Version': version
    }
}

uploadArchives {
	repositories {
		mavenDeployer {
			repository(url:"http://70.121.245.206:8001/nexus/content/repositories/ambe-snapshots/") {
				authentication(userName:"admin", password:"admin123")
			}
			
			pom {
				version = version
				artifactId = "am-auth-server"
				groupId = "com.sds.anyframe.mobile.amauth"
			}
		}
	}
}

flyway {
    url = 'jdbc:hsqldb:file:db/file/hsqldb'
    //user = 'sa'
}

repositories {
    mavenCentral()
    maven {
        url "http://70.121.245.206:8001/nexus/content/repositories/thirdparty/"
    }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

ext {
    slf4jVersion = '1.7.12'
    logbackVersion = '1.1.3'
}

List loggers = [
    "org.slf4j:slf4j-api:${slf4jVersion}",
    "org.slf4j:jcl-over-slf4j:${slf4jVersion}",
    "org.slf4j:log4j-over-slf4j:${slf4jVersion}",
    "org.slf4j:jul-to-slf4j:${slf4jVersion}",
    "ch.qos.logback:logback-core:${logbackVersion}",
    "ch.qos.logback:logback-classic:${logbackVersion}"
]

// commons-logging, log4j, jul 의존성 제거
configurations {
    all.collect { configuration ->
        configuration.exclude group: 'commons-logging', module: 'commons-logging'
        configuration.exclude group: 'log4j', module: 'log4j'
        configuration.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        configuration.exclude group: 'org.slf4j', module: 'slf4j-jcl'
        configuration.exclude group: 'org.slf4j', module: 'slf4j-jdk14'
    }
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

def distributionsCopySpec = copySpec {
    into("$name-$version") {
        into('') {
            from libsDir
            include '*.jar' //copy the fat jar created by bootRepackage
        }
        from '../am-auth-doc/am-auth-server/readme.md'
    }
}

task zip(type: Zip, dependsOn: bootRepackage) {
    from('build/libs') {
        include '*.jar'
    }
    from 'build/script'
    from '../am-auth-doc/am-auth-server/readme.md'
    from 'src/main/sample/server.sample.conf'
    from('src/main/sample/self-signed-cert') {
        include '*'
        into 'self-signed-cert-sample'
    }
}

task tar(type: Tar, dependsOn: bootRepackage) {
    from('build/libs') {
        include '*.jar'
    }
    from 'build/script'
    from '../am-auth-doc/am-auth-server/readme.md'
    from 'src/main/sample/server.sample.conf'
    from('src/main/sample/self-signed-cert') {
        include '*'
        into 'self-signed-cert-sample'
    }
}

task filter(type: Copy) {
    from('src/main/script'){
        include '*'
        fileMode 0744
    }
    into 'build/script'
    filter(FixCrLfFilter)
    filter(ReplaceTokens, tokens: [version: version])
}

build.dependsOn(zip,tar)
assemble.dependsOn(filter)

zip.dependsOn(filter)
tar.dependsOn(filter)

uploadArchives.dependsOn bootRepackage

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}
check.dependsOn integrationTest
integrationTest.mustRunAfter test

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

dependencies {
    // tag::jetty[]
    compile ("org.springframework.boot:spring-boot-starter-web:${springBootVersion}") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    compile ("org.springframework.boot:spring-boot-starter-jetty:${springBootVersion}") {
        exclude group: 'org.eclipse.jetty.websocket'
    }
    
    compile ("org.springframework.security.oauth:spring-security-oauth2:${springSecurityOauthVersion}")
    
    compile("org.springframework.boot:spring-boot-starter-security:${springBootVersion}")
    
    // ApacheDS(apache directory server)
    //compile('org.apache.directory.server:apacheds-server-jndi:1.5.7')
    compile('org.apache.directory.server:apacheds-core:1.5.5')
    compile('org.apache.directory.server:apacheds-core-entry:1.5.5')
    compile('org.apache.directory.server:apacheds-protocol-ldap:1.5.5')
    compile('org.apache.directory.server:apacheds-protocol-shared:1.5.5')
    compile('org.apache.directory.server:apacheds-server-jndi:1.5.5')
    //compile('org.apache.directory.shared:shared-ldap:0.9.15')
    
    // ldap
    compile("org.springframework.security:spring-security-ldap:${springSecurityLdapVersion}")
    
    // hsql
    compile("org.hsqldb:hsqldb:2.3.1")
    
    // flyway
    compile("org.flywaydb:flyway-core:3.2.1")
    
    compile ("org.springframework:spring-jdbc:${springVersion}")
    compile ("org.springframework:spring-aop:${springVersion}")
    compile ("org.springframework:spring-context:${springVersion}")
    compile ("org.springframework:spring-expression:${springVersion}")
    compile ("org.springframework:spring-web:${springVersion}")
    compile ("org.springframework:spring-webmvc:${springVersion}")
    compile ("org.springframework:spring-tx:${springVersion}")
    // end::jetty[]
    // tag::actuator[]
    compile("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    // end::actuator[]
    
    compile("org.apache.commons:commons-lang3:3.4")
    compile("commons-pool:commons-pool:1.6")
    compile("commons-collections:commons-collections:3.2.2")
	compile('com.google.guava:guava:18.0')
	compile('org.flywaydb:flyway-core:3.2.1')
	
    // loggers
    compile loggers

    testCompile("junit:junit:4.12")
    testCompile("org.mockito:mockito-core:1.9.5")
    
    //rest
    testCompile("org.springframework:spring-test:4.1.8.RELEASE")

    //web console
    testCompile ("org.seleniumhq.selenium:selenium-firefox-driver:2.53.0")
    testCompile ("org.seleniumhq.selenium:selenium-java:2.53.0")
    testCompile ("ru.stqa.selenium:webdriver-expected-conditions:1.0.52")

    //json
    testCompile("com.googlecode.json-simple:json-simple:1.1.1")
    testCompile("org.apache.httpcomponents:httpclient:4.5")
    testCompile("org.apache.httpcomponents:httpmime:4.5")
    
    testCompile("org.hamcrest:hamcrest-library:1.3")

    testCompile("org.apache.httpcomponents:httpmime:4.5.2")

}

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}
